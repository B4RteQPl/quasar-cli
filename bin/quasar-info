#!/usr/bin/env node

const
  parseArgs = require('minimist'),
  chalk = require('chalk')

const
  appPaths = require('../lib/build/app-paths')

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help'
  },
  boolean: ['h']
})

if (argv.help) {
  console.log(`
    Description
      Displays information about your machine and your Quasar App.
    Usage
      $ quasar info
    Options
      --help, -h     Displays this message
  `)
  process.exit(0)
}

function safeExec (command) {
  try {
    return chalk.green(String(exec(command)).trim())
  }
  catch (err) {
    return chalk.red('Not available')
  }
}

function safePkgInfo (pkg) {
  try {
    const content = require(appPaths.resolve.app(`node_modules/${pkg}/package.json`))
    return {
      key: `  ${String(content.name).trim()}`,
      value: `${chalk.green(String(content.version).trim())}${content.description ? `\t(${content.description})` : ''}`
    }
  }
  catch (err) {
    return {
      key: `  ${pkg}`,
      value: chalk.red('Not available')
    }
  }
}

const
  os = require('os'),
  exec = require("child_process").execSync

const
  getExternalIPs = require('../lib/helpers/net').getExternalNetworkInterface,
  output = [
    { key: 'Operating System', value: chalk.green(`${os.type()}(${os.release()}) - ${os.platform()}/${os.arch()}`), section: true },
    { key: 'NodeJs', value: chalk.green(String(process.version).slice(1).trim()) },
    { key: 'Global packages', section: true },
    { key: '  NPM', value: safeExec('npm --version') },
    { key: '  vue-cli', value: safeExec('vue --version') },
    { key: '  cordova', value: safeExec('cordova --version') },
    { key: 'Important local packages', section: true }
  ]

;[
  'quasar-application',
  'quasar-framework',
  'quasar-extras',
  'vue',
  'vue-router',
  'vuex',
  'electron',
  'babel-core',
  'webpack',
].forEach(pkg => output.push(safePkgInfo(pkg)))

output.push(
  { key: 'Networking', section: true },
  { key: '  Host', value: chalk.green(os.hostname()) }
)
getExternalIPs().forEach(intf => {
  output.push({
    key: `  ${ intf.deviceName }`,
    value: chalk.green(intf.address)
  })
})

const spaces = output.reduce((acc, v) => Math.max(acc, v.key.length), 0)
console.log(
  output
    .map(m => `${m.section ? '\n' : ''}${ m.key }${' '.repeat(spaces - m.key.length)}\t${ m.value === undefined ? '' : m.value }`).join('\n')
)
console.log()
